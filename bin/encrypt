#!/usr/bin/env php
<?php

use Aws\S3\S3Client;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Dotenv\Dotenv;
use xeBook\Readium\Encrypt\Command\EncryptCommand;
use xeBook\Readium\Encrypt\Encrypt;
use xeBook\Readium\Encrypt\Filesystem\AwsS3Adapter;

set_time_limit(0);

require __DIR__.'/../vendor/autoload.php';

if (!class_exists(Application::class)) {
    throw new \RuntimeException('You need to add "symfony/console" as a Composer dependency.');
}

$input = new ArgvInput();
$output = new ConsoleOutput();
$io = new \Symfony\Component\Console\Style\SymfonyStyle($input, $output);

if (!isset($_ENV['APP_ENV'])) {
    if (!class_exists(Dotenv::class)) {
        $io->error('APP_ENV environment variable is not defined. You need to define environment variables for configuration or add "symfony/dotenv" as a Composer dependency to load variables from a .env file.');
        exit -1;
    }
    (new Dotenv())->load(__DIR__.'/../.env');
}
if (!isset($_ENV['ENCRYPT_TOOL'])) {
    $io->error('ENCRYPT_TOOL environment variable is not defined. You need to define environment variables for configuration or add "symfony/dotenv" as a Composer dependency to load variables from a .env file.');
   exit -1;
}



$env    = $input->getParameterOption(['--env', '-e'], $_ENV['APP_ENV'] ?? 'dev');
$debug  = ($_ENV['APP_DEBUG'] ?? ('prod' !== $env)) && !$input->hasParameterOption(['--no-debug', '']);

if ($debug) {
    umask(0000);

    if (class_exists(Debug::class)) {
        Debug::enable();
    }
}
//// ... register services
$awsS3Adapter = new AwsS3Adapter(new S3Client([
    'version' => 'latest',
    'region'  => $_ENV['AWS_S3_REGION'],
    'debug'   => false,
    'prefix'  => '',
    'credentials'  => [
        'key'       => $_ENV['AWS_AWS_ACCESS_KEY_ID'],
        'secret'    => $_ENV['AWS_SECRET_ACCESS_KEY']
    ]

]), $_ENV['AWS_S3_BUCKET']);

$encrypt = new Encrypt($_ENV['ENCRYPT_TOOL'], $_ENV['LICENSE_SERVER_ENDPOINT'], $_ENV['LICENSE_SERVER_USERNAME'], $_ENV['LICENSE_SERVER_PASSWORD']);
//// ... register commands

$application = new Application('readium-encrypt-tool', '1.0');
$command = new EncryptCommand($encrypt, $awsS3Adapter, $_ENV['LICENSE_SERVER_PROFILE']);
$application->add($command);
$application->setDefaultCommand($command->getName(), true);
$application->run($input);

