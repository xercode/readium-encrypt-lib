#!/usr/bin/env php
<?php

use Aws\S3\S3Client;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Dotenv\Dotenv;
use Symfony\Component\Messenger\MessageBus;
use Symfony\Component\Messenger\Middleware\FailedMessageProcessingMiddleware;
use Symfony\Component\Messenger\Middleware\SendMessageMiddleware;
use Symfony\Component\Messenger\Tests\Fixtures\DummyMessage;
use Symfony\Component\Messenger\Transport\AmqpExt\AmqpTransportFactory;
use Symfony\Component\Messenger\Transport\Serialization\Serializer;
use xeBook\Readium\Encrypt\Command\Application;
use xeBook\Readium\Encrypt\Command\EncryptCommand;
use xeBook\Readium\Encrypt\Encrypt;
use xeBook\Readium\Encrypt\Filesystem\AwsS3Adapter;

set_time_limit(0);

require __DIR__.'/../vendor/autoload.php';

if (!class_exists(Application::class)) {
    throw new \RuntimeException('You need to add "symfony/console" as a Composer dependency.');
}

$input = new ArgvInput();
$output = new ConsoleOutput();
$io = new \Symfony\Component\Console\Style\SymfonyStyle($input, $output);

if (!isset($_ENV['APP_ENV'])) {
    if (!class_exists(Dotenv::class)) {
        $io->error('APP_ENV environment variable is not defined. You need to define environment variables for configuration or add "symfony/dotenv" as a Composer dependency to load variables from a .env file.');
        exit -1;
    }
    (new Dotenv())->load(__DIR__.'/../.env');
}
if (!isset($_ENV['ENCRYPT_TOOL'])) {
    $io->error('ENCRYPT_TOOL environment variable is not defined. You need to define environment variables for configuration or add "symfony/dotenv" as a Composer dependency to load variables from a .env file.');
   exit -1;
}



$env    = $input->getParameterOption(['--env', '-e'], $_ENV['APP_ENV'] ?? 'dev');
$debug  = ($_ENV['APP_DEBUG'] ?? ('prod' !== $env)) && !$input->hasParameterOption(['--no-debug', '']);

if ($debug) {
    umask(0000);

    if (class_exists(Debug::class)) {
        Debug::enable();
    }
}
//// ... register commands

$application = new Application($env, $debug);
$application->setDefaultCommand(EncryptCommand::getDefaultName(), true);

$application->run($input);

